#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
BEGIN { unshift @INC, "$FindBin::Bin/../lib" }

use Pod::Usage;
use DreamGuild::WWW;


chdir "$FindBin::Bin/..";

sub create_db {
  system ('rm -rf share/data/database.db');
  system ('sqlite3 share/data/database.db < share/data/database.sql');
}

sub update_roster {
  require DreamGuild::Utils::Roster;
  DreamGuild::Utils::Roster->new->update_roster;
}

sub update_realm_list {
  require DreamGuild::Utils::Realms;
  DreamGuild::Utils::Realms->update_realm_list;
}

sub maintenance {
  require DreamGuild::Utils::Maintenance;
  DreamGuild::Utils::Maintenance->new->weekly;
}

sub start_server {
  system ('hypnotoad script/dreamguild-www');
}

sub stop_server {
  system ('hypnotoad -s script/dreamguild-www');
}

sub start_morbo {
  system ('morbo script/dreamguild-www');
}

sub restart_server {
  stop_server ();
  start_server ();
}

sub update {
  die "Usage: $0 --update {version}\n" unless (defined ($ARGV[1]));
  stop_server ();
  system ('git pull');
  system ('git', 'checkout', $ARGV[1]);
  start_server ();
}

sub backup_database {
  my @time = localtime (time);

  $time[5] += 1900;
  $time[4] += 1;

  for (1, 2, 3, 4) {
    $time[$_] = '0' . $time[$_] if $time[$_] < 10;
  }

  my $filename = "database-$DreamGuild::WWW::VERSION-$time[5]$time[4]$time[3]$time[2]$time[1]";

  system ("gzip -c9 share/data/database.db | gpg -e -r onur\@onur.im --batch > share/data/backups/$filename.gz.enc");
}

sub release {
  die "Usage: $0 --release {version}\n" unless (defined ($ARGV[1]));
  system ('git', 'tag', $ARGV[1]);
  system ('git push github');
  system ('git push github --tags');
  system ('ssh', 'dream@onur.im', '~/dreamguild.eu/script/dreamguild',
          '--update', $ARGV[1]);

}


sub usage {
  pod2usage (0);
}


sub main {
  return usage () if not defined $ARGV[0];
  return create_db ()       if $ARGV[0] eq '--create-db';
  return update_roster ()   if $ARGV[0] eq '--update-roster';
  return maintenance ()     if $ARGV[0] eq '--maintenance';
  return update_realm_list () if $ARGV[0] eq '--update-realm-list';
  return start_server ()    if $ARGV[0] eq '--start';
  return stop_server ()     if $ARGV[0] eq '--stop';
  return restart_server ()  if $ARGV[0] eq '--restart';
  return start_morbo ()     if $ARGV[0] eq '--morbo';
  return update ()          if $ARGV[0] eq '--update';
  return backup_database () if $ARGV[0] eq '--backup-database';
  return release ()         if $ARGV[0] eq '--release';
}


&main;
0;


__END__

=head1 NAME

dreamguild - Management script

=head1 ARGUMENTS

=over 7

=item B<--create-db>

Create SQLite database under I<share/data/database.db> and runs 
I<share/data/database.sql> script. Old database will be removed with I<rm>
and a new database will be created.

=item B<--update-roster>

Update roster.

=item B<--maintenance>

Runs maintenance.

=item B<--update-realm-list>

Update realm list.

=item B<--start>

Start hypnotoad server.

=item B<--stop>

Stop hypnotoad server.

=item B<--restart>

Restart hypnotoad server.

=item B<--morbo>

Start morbo server.

=item B<--update> [I<VERSION>]

Update dreamguild to I<VERSION>. This will:
Stop server, git pull, git checkout I<VERSION>, start server.

=item B<--backup-database>

Backup database under to share/data/backups/ and encode it with gpg.

=item B<--release> [I<VERSION>]

Release dreamguild I<VERSION>. This will: git tag I<VERSION>, git push github
git push github --tags, ssh dream@dreamguild.eu --update I<VERSION>

=back
