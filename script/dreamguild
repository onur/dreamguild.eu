#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
BEGIN { unshift @INC, "$FindBin::Bin/../lib" }

chdir "$FindBin::Bin/..";

sub create_db {
  system ('rm -rf share/data/database.db');
  system ('sqlite3 share/data/database.db < share/data/database.sql');
}

sub update_roster {
  require DreamGuild::Utils::Roster;
  DreamGuild::Utils::Roster->new->update_roster;
}

sub update_realm_list {
  require DreamGuild::Utils::Realms;
  DreamGuild::Utils::Realms->update_realm_list;
}

sub start_server {
  system ('hypnotoad script/dreamguild-www');
}

sub stop_server {
  system ('hypnotoad -s script/dreamguild-www');
}

sub start_morbo {
  system ('morbo script/dreamguild-www');
}

sub restart_server {
  stop_server ();
  start_server ();
}

sub update {
  die "Usage: $0 --update {version}\n" unless (defined ($ARGV[1]));
  stop_server ();
  system ('git pull');
  system ('git', 'checkout', $ARGV[1]);
  start_server ();
}

sub backup_database {
  my @time = localtime (time);

  $time[5] += 1900;
  $time[4] += 1;

  for (1, 2, 3, 4) {
    $time[$_] = '0' . $time[$_] if $time[$_] < 10;
  }

  my $filename = "$time[5]$time[4]$time[3]$time[2]$time[1]";

  system ("gzip -c9 share/data/database.db | gpg -e -r onur\@onur.im --batch > share/data/backups/db-$filename.gz.enc");
}


sub main {
  return if not defined $ARGV[0];
  return create_db ()       if $ARGV[0] eq '--create-db';
  return update_roster ()   if $ARGV[0] eq '--update-roster';
  return update_realm_list () if $ARGV[0] eq '--update-realm-list';
  return start_server ()    if $ARGV[0] eq '--start';
  return stop_server ()     if $ARGV[0] eq '--stop';
  return restart_server ()  if $ARGV[0] eq '--restart';
  return start_morbo ()     if $ARGV[0] eq '--morbo';
  return update ()          if $ARGV[0] eq '--update';
  return backup_database () if $ARGV[0] eq '--backup-database';
}


&main;
0;
